# coding: utf-8

"""
    SAFRS Demo App

    <a href=http://jsonapi.org>Json-API</a> compliant API built with https://github.com/thomaxxl/safrs <br/>- <a href=\"https://github.com/thomaxxl/safrs/blob/master/examples/demo_relationship.py\">Source code of this page</a> <br/> - Auto-generated swagger spec: <a href=swagger.json>swagger.json</a> <br/> - Petstore <a href=http://petstore.swagger.io/?url=http://thomaxxl.pythonanywhere.com/api/swagger.json>Swagger2 UI</a>                                         # noqa: E501

    OpenAPI spec version: 0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UsersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def createa_userobject0(self, post_body, **kwargs):  # noqa: E501
        """Create a User object              # noqa: E501

        Returns a User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.createa_userobject0(post_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param UserPOSTSample post_body: User attributes (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async"):
            return self.createa_userobject0_with_http_info(post_body, **kwargs)  # noqa: E501
        else:
            (data) = self.createa_userobject0_with_http_info(post_body, **kwargs)  # noqa: E501
            return data

    def createa_userobject0_with_http_info(self, post_body, **kwargs):  # noqa: E501
        """Create a User object              # noqa: E501

        Returns a User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.createa_userobject0_with_http_info(post_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param UserPOSTSample post_body: User attributes (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["post_body"]  # noqa: E501
        all_params.append("async")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method createa_userobject0" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'post_body' is set
        if "post_body" not in params or params["post_body"] is None:
            raise ValueError("Missing the required parameter `post_body` when calling `createa_userobject0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post_body" in params:
            body_params = params["post_body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/Users/",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get("async"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def createa_userobject1(self, user_id, post_body, **kwargs):  # noqa: E501
        """Create a User object                          # noqa: E501

        Returns a User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.createa_userobject1(user_id, post_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: (required)
        :param UserPOSTSample post_body: User attributes (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async"):
            return self.createa_userobject1_with_http_info(user_id, post_body, **kwargs)  # noqa: E501
        else:
            (data) = self.createa_userobject1_with_http_info(user_id, post_body, **kwargs)  # noqa: E501
            return data

    def createa_userobject1_with_http_info(self, user_id, post_body, **kwargs):  # noqa: E501
        """Create a User object                          # noqa: E501

        Returns a User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.createa_userobject1_with_http_info(user_id, post_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: (required)
        :param UserPOSTSample post_body: User attributes (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["user_id", "post_body"]  # noqa: E501
        all_params.append("async")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method createa_userobject1" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError("Missing the required parameter `user_id` when calling `createa_userobject1`")  # noqa: E501
        # verify the required parameter 'post_body' is set
        if "post_body" not in params or params["post_body"] is None:
            raise ValueError("Missing the required parameter `post_body` when calling `createa_userobject1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_id" in params:
            path_params["UserId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post_body" in params:
            body_params = params["post_body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/Users/{UserId}/",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get("async"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def deletea_userobject0(self, user_id, **kwargs):  # noqa: E501
        """Delete a User object              # noqa: E501

        Delete a User object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.deletea_userobject0(user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async"):
            return self.deletea_userobject0_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.deletea_userobject0_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def deletea_userobject0_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Delete a User object              # noqa: E501

        Delete a User object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.deletea_userobject0_with_http_info(user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["user_id"]  # noqa: E501
        all_params.append("async")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method deletea_userobject0" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError("Missing the required parameter `user_id` when calling `deletea_userobject0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_id" in params:
            path_params["UserId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/Users/{UserId}/",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get("async"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def deletefrom_userbooks0(self, user_id, book_id, **kwargs):  # noqa: E501
        """Delete from User books  # noqa: E501

        Delete a Book object from the books relation on User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.deletefrom_userbooks0(user_id, book_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: User item (required)
        :param str book_id: books item (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async"):
            return self.deletefrom_userbooks0_with_http_info(user_id, book_id, **kwargs)  # noqa: E501
        else:
            (data) = self.deletefrom_userbooks0_with_http_info(user_id, book_id, **kwargs)  # noqa: E501
            return data

    def deletefrom_userbooks0_with_http_info(self, user_id, book_id, **kwargs):  # noqa: E501
        """Delete from User books  # noqa: E501

        Delete a Book object from the books relation on User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.deletefrom_userbooks0_with_http_info(user_id, book_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: User item (required)
        :param str book_id: books item (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["user_id", "book_id"]  # noqa: E501
        all_params.append("async")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method deletefrom_userbooks0" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError("Missing the required parameter `user_id` when calling `deletefrom_userbooks0`")  # noqa: E501
        # verify the required parameter 'book_id' is set
        if "book_id" not in params or params["book_id"] is None:
            raise ValueError("Missing the required parameter `book_id` when calling `deletefrom_userbooks0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_id" in params:
            path_params["UserId"] = params["user_id"]  # noqa: E501
        if "book_id" in params:
            path_params["BookId"] = params["book_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/Users/{UserId}/books/{BookId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get("async"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def invoke_usergetlist0(self, post_user_get_list, **kwargs):  # noqa: E501
        """Invoke User.get_list              # noqa: E501

        Invoke User.get_list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invoke_usergetlist0(post_user_get_list, async=True)
        >>> result = thread.get()

        :param async bool
        :param PostUserGetList post_user_get_list: Retrieve a list of objects with the ids in id_list. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async"):
            return self.invoke_usergetlist0_with_http_info(post_user_get_list, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_usergetlist0_with_http_info(post_user_get_list, **kwargs)  # noqa: E501
            return data

    def invoke_usergetlist0_with_http_info(self, post_user_get_list, **kwargs):  # noqa: E501
        """Invoke User.get_list              # noqa: E501

        Invoke User.get_list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invoke_usergetlist0_with_http_info(post_user_get_list, async=True)
        >>> result = thread.get()

        :param async bool
        :param PostUserGetList post_user_get_list: Retrieve a list of objects with the ids in id_list. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["post_user_get_list"]  # noqa: E501
        all_params.append("async")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method invoke_usergetlist0" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'post_user_get_list' is set
        if "post_user_get_list" not in params or params["post_user_get_list"] is None:
            raise ValueError("Missing the required parameter `post_user_get_list` when calling `invoke_usergetlist0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post_user_get_list" in params:
            body_params = params["post_user_get_list"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/Users/get_list",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get("async"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def retrievea_userobject0(self, **kwargs):  # noqa: E501
        """Retrieve a User object              # noqa: E501

        Returns a User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.retrievea_userobject0(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page_offset: Page offset
        :param int page_limit: max number of items
        :param str include: related objects to include
        :param str fields_users: Fields to be selected (csv)
        :param str sort: Sort order
        :param str filter_name: name attribute filter (csv)
        :param str filter_email: email attribute filter (csv)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async"):
            return self.retrievea_userobject0_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.retrievea_userobject0_with_http_info(**kwargs)  # noqa: E501
            return data

    def retrievea_userobject0_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a User object              # noqa: E501

        Returns a User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.retrievea_userobject0_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page_offset: Page offset
        :param int page_limit: max number of items
        :param str include: related objects to include
        :param str fields_users: Fields to be selected (csv)
        :param str sort: Sort order
        :param str filter_name: name attribute filter (csv)
        :param str filter_email: email attribute filter (csv)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["page_offset", "page_limit", "include", "fields_users", "sort", "filter_name", "filter_email"]  # noqa: E501
        all_params.append("async")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method retrievea_userobject0" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "page_offset" in params:
            query_params.append(("page[offset]", params["page_offset"]))  # noqa: E501
        if "page_limit" in params:
            query_params.append(("page[limit]", params["page_limit"]))  # noqa: E501
        if "include" in params:
            query_params.append(("include", params["include"]))  # noqa: E501
        if "fields_users" in params:
            query_params.append(("fields[Users]", params["fields_users"]))  # noqa: E501
        if "sort" in params:
            query_params.append(("sort", params["sort"]))  # noqa: E501
        if "filter_name" in params:
            query_params.append(("filter[name]", params["filter_name"]))  # noqa: E501
        if "filter_email" in params:
            query_params.append(("filter[email]", params["filter_email"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/Users/",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get("async"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def retrievea_userobject1(self, user_id, **kwargs):  # noqa: E501
        """Retrieve a User object                          # noqa: E501

        Returns a User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.retrievea_userobject1(user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: (required)
        :param int page_offset: Page offset
        :param int page_limit: max number of items
        :param str include: related objects to include
        :param str fields_users: Fields to be selected (csv)
        :param str sort: Sort order
        :param str filter_name: name attribute filter (csv)
        :param str filter_email: email attribute filter (csv)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async"):
            return self.retrievea_userobject1_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrievea_userobject1_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def retrievea_userobject1_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Retrieve a User object                          # noqa: E501

        Returns a User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.retrievea_userobject1_with_http_info(user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: (required)
        :param int page_offset: Page offset
        :param int page_limit: max number of items
        :param str include: related objects to include
        :param str fields_users: Fields to be selected (csv)
        :param str sort: Sort order
        :param str filter_name: name attribute filter (csv)
        :param str filter_email: email attribute filter (csv)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "user_id",
            "page_offset",
            "page_limit",
            "include",
            "fields_users",
            "sort",
            "filter_name",
            "filter_email",
        ]  # noqa: E501
        all_params.append("async")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method retrievea_userobject1" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError("Missing the required parameter `user_id` when calling `retrievea_userobject1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_id" in params:
            path_params["UserId"] = params["user_id"]  # noqa: E501

        query_params = []
        if "page_offset" in params:
            query_params.append(("page[offset]", params["page_offset"]))  # noqa: E501
        if "page_limit" in params:
            query_params.append(("page[limit]", params["page_limit"]))  # noqa: E501
        if "include" in params:
            query_params.append(("include", params["include"]))  # noqa: E501
        if "fields_users" in params:
            query_params.append(("fields[Users]", params["fields_users"]))  # noqa: E501
        if "sort" in params:
            query_params.append(("sort", params["sort"]))  # noqa: E501
        if "filter_name" in params:
            query_params.append(("filter[name]", params["filter_name"]))  # noqa: E501
        if "filter_email" in params:
            query_params.append(("filter[email]", params["filter_email"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/Users/{UserId}/",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get("async"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def retrieveabooksobject0(self, user_id, **kwargs):  # noqa: E501
        """Retrieve a books object  # noqa: E501

        Returns User books ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.retrieveabooksobject0(user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: User item (required)
        :param int page_offset: Page offset
        :param int page_limit: max number of items
        :param str include: related objects to include
        :param str fields_users: Fields to be selected (csv)
        :param str sort: Sort order
        :param str filter_name: name attribute filter (csv)
        :param str filter_email: email attribute filter (csv)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async"):
            return self.retrieveabooksobject0_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieveabooksobject0_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def retrieveabooksobject0_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Retrieve a books object  # noqa: E501

        Returns User books ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.retrieveabooksobject0_with_http_info(user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: User item (required)
        :param int page_offset: Page offset
        :param int page_limit: max number of items
        :param str include: related objects to include
        :param str fields_users: Fields to be selected (csv)
        :param str sort: Sort order
        :param str filter_name: name attribute filter (csv)
        :param str filter_email: email attribute filter (csv)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "user_id",
            "page_offset",
            "page_limit",
            "include",
            "fields_users",
            "sort",
            "filter_name",
            "filter_email",
        ]  # noqa: E501
        all_params.append("async")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method retrieveabooksobject0" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError("Missing the required parameter `user_id` when calling `retrieveabooksobject0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_id" in params:
            path_params["UserId"] = params["user_id"]  # noqa: E501

        query_params = []
        if "page_offset" in params:
            query_params.append(("page[offset]", params["page_offset"]))  # noqa: E501
        if "page_limit" in params:
            query_params.append(("page[limit]", params["page_limit"]))  # noqa: E501
        if "include" in params:
            query_params.append(("include", params["include"]))  # noqa: E501
        if "fields_users" in params:
            query_params.append(("fields[Users]", params["fields_users"]))  # noqa: E501
        if "sort" in params:
            query_params.append(("sort", params["sort"]))  # noqa: E501
        if "filter_name" in params:
            query_params.append(("filter[name]", params["filter_name"]))  # noqa: E501
        if "filter_email" in params:
            query_params.append(("filter[email]", params["filter_email"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/Users/{UserId}/books",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get("async"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def retrieveabooksobject1(self, user_id, book_id, **kwargs):  # noqa: E501
        """Retrieve a books object  # noqa: E501

        Returns User books ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.retrieveabooksobject1(user_id, book_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: User item (required)
        :param str book_id: books item (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async"):
            return self.retrieveabooksobject1_with_http_info(user_id, book_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieveabooksobject1_with_http_info(user_id, book_id, **kwargs)  # noqa: E501
            return data

    def retrieveabooksobject1_with_http_info(self, user_id, book_id, **kwargs):  # noqa: E501
        """Retrieve a books object  # noqa: E501

        Returns User books ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.retrieveabooksobject1_with_http_info(user_id, book_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: User item (required)
        :param str book_id: books item (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["user_id", "book_id"]  # noqa: E501
        all_params.append("async")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method retrieveabooksobject1" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError("Missing the required parameter `user_id` when calling `retrieveabooksobject1`")  # noqa: E501
        # verify the required parameter 'book_id' is set
        if "book_id" not in params or params["book_id"] is None:
            raise ValueError("Missing the required parameter `book_id` when calling `retrieveabooksobject1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_id" in params:
            path_params["UserId"] = params["user_id"]  # noqa: E501
        if "book_id" in params:
            path_params["BookId"] = params["book_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/Users/{UserId}/books/{BookId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get("async"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def updatea_userobject0(self, user_id, post_body, **kwargs):  # noqa: E501
        """Update a User object              # noqa: E501

        Returns a User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updatea_userobject0(user_id, post_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: (required)
        :param UserPOSTSample1 post_body: User attributes (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async"):
            return self.updatea_userobject0_with_http_info(user_id, post_body, **kwargs)  # noqa: E501
        else:
            (data) = self.updatea_userobject0_with_http_info(user_id, post_body, **kwargs)  # noqa: E501
            return data

    def updatea_userobject0_with_http_info(self, user_id, post_body, **kwargs):  # noqa: E501
        """Update a User object              # noqa: E501

        Returns a User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updatea_userobject0_with_http_info(user_id, post_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: (required)
        :param UserPOSTSample1 post_body: User attributes (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["user_id", "post_body"]  # noqa: E501
        all_params.append("async")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method updatea_userobject0" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError("Missing the required parameter `user_id` when calling `updatea_userobject0`")  # noqa: E501
        # verify the required parameter 'post_body' is set
        if "post_body" not in params or params["post_body"] is None:
            raise ValueError("Missing the required parameter `post_body` when calling `updatea_userobject0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_id" in params:
            path_params["UserId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post_body" in params:
            body_params = params["post_body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/Users/{UserId}/",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get("async"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def updatebooks0(self, user_id, books_body, **kwargs):  # noqa: E501
        """Update books  # noqa: E501

        Add a Book object to the books relation on User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updatebooks0(user_id, books_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: User item (required)
        :param BooksRelationship books_body: books POST model (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async"):
            return self.updatebooks0_with_http_info(user_id, books_body, **kwargs)  # noqa: E501
        else:
            (data) = self.updatebooks0_with_http_info(user_id, books_body, **kwargs)  # noqa: E501
            return data

    def updatebooks0_with_http_info(self, user_id, books_body, **kwargs):  # noqa: E501
        """Update books  # noqa: E501

        Add a Book object to the books relation on User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.updatebooks0_with_http_info(user_id, books_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: User item (required)
        :param BooksRelationship books_body: books POST model (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["user_id", "books_body"]  # noqa: E501
        all_params.append("async")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method updatebooks0" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'user_id' is set
        if "user_id" not in params or params["user_id"] is None:
            raise ValueError("Missing the required parameter `user_id` when calling `updatebooks0`")  # noqa: E501
        # verify the required parameter 'books_body' is set
        if "books_body" not in params or params["books_body"] is None:
            raise ValueError("Missing the required parameter `books_body` when calling `updatebooks0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "user_id" in params:
            path_params["UserId"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "books_body" in params:
            body_params = params["books_body"]
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/Users/{UserId}/books",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get("async"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
