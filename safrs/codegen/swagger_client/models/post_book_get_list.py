# coding: utf-8

"""
    SAFRS Demo App

    <a href=http://jsonapi.org>Json-API</a> compliant API built with https://github.com/thomaxxl/safrs <br/>- <a href=\"https://github.com/thomaxxl/safrs/blob/master/examples/demo_relationship.py\">Source code of this page</a> <br/> - Auto-generated swagger spec: <a href=swagger.json>swagger.json</a> <br/> - Petstore <a href=http://petstore.swagger.io/?url=http://thomaxxl.pythonanywhere.com/api/swagger.json>Swagger2 UI</a>                                         # noqa: E501

    OpenAPI spec version: 0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.book_get_list import BookGetList  # noqa: F401,E501


class PostBookGetList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"meta": "BookGetList"}

    attribute_map = {"meta": "meta"}

    def __init__(self, meta=None):  # noqa: E501
        """PostBookGetList - a model defined in Swagger"""  # noqa: E501

        self._meta = None
        self.discriminator = None

        if meta is not None:
            self.meta = meta

    @property
    def meta(self):
        """Gets the meta of this PostBookGetList.  # noqa: E501


        :return: The meta of this PostBookGetList.  # noqa: E501
        :rtype: BookGetList
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this PostBookGetList.


        :param meta: The meta of this PostBookGetList.  # noqa: E501
        :type: BookGetList
        """

        self._meta = meta

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostBookGetList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
